package ui;

import com.toedter.calendar.JTextFieldDateEditor;

import java.awt.Color;
import java.awt.event.MouseEvent;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import javax.swing.*;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;

import model.City;
import model.Flight;
import service.BookingService;
import service.ConverterService;
import service.FlightService;

import static javax.swing.JOptionPane.*;

public class ReturnBooking extends javax.swing.JFrame {

    private final BookingService bookingService;
    private final FlightService flightService;
    private final ConverterService converterService;
    private final InfoGenerator infoGenerator;
    private List<Flight> flights;

    private JFrame previousFrame;
    private Flight outboundFlight;

    public ReturnBooking(BookingService bookingService, FlightService flightService, ConverterService converterService) {
        this.bookingService = bookingService;
        this.flightService = flightService;
        this.converterService = converterService;
        this.infoGenerator = new InfoGenerator();
        this.flights = new ArrayList<>();

        initComponents();
        initOtherComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nextButton = new javax.swing.JButton();
        roundTripRadioButton = new javax.swing.JRadioButton();
        oneWayRadioButton = new javax.swing.JRadioButton();
        searchButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        currencySelector = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        flightsTable = new javax.swing.JTable();
        originSelector = new javax.swing.JComboBox<>();
        destinationSelector = new javax.swing.JComboBox<>();
        destinationLabel = new javax.swing.JLabel();
        originLabel = new javax.swing.JLabel();
        arrivalLabel = new javax.swing.JLabel();
        arrivalChooser = new com.toedter.calendar.JDateChooser();
        numberOfTicketsSpinner = new javax.swing.JSpinner();
        numberOfTicketsLabel = new javax.swing.JLabel();
        returnFlightsLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Travel Agency");
        setResizable(false);

        nextButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        nextButton.setText("Next");
        nextButton.setEnabled(false);
        nextButton.setFocusable(false);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        roundTripRadioButton.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        roundTripRadioButton.setSelected(true);
        roundTripRadioButton.setText("Round Trip");
        roundTripRadioButton.setEnabled(false);
        roundTripRadioButton.setFocusable(false);

        oneWayRadioButton.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        oneWayRadioButton.setText("One Way");
        oneWayRadioButton.setEnabled(false);
        oneWayRadioButton.setFocusable(false);

        searchButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        searchButton.setText("Search");
        searchButton.setFocusable(false);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        backButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        backButton.setText("Back");
        backButton.setFocusable(false);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        currencySelector.setBackground(Color.WHITE);
        currencySelector.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        currencySelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Currency: IRR ريال", "Currency: USD $", "Currency: EUR €"}));
        currencySelector.setFocusable(false);
        currencySelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currencySelectorActionPerformed(evt);
            }
        });

        flightsTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        flightsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "Number", "Origin", "Destination", "Departure", "Price", "Seats Left"
                }
        ) {
            Class[] types = new Class[]{
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean[]{
                    false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        flightsTable.setFocusable(false);
        flightsTable.setOpaque(false);
        flightsTable.setRequestFocusEnabled(false);
        flightsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        flightsTable.getTableHeader().setReorderingAllowed(false);
        flightsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                flightsTableMouseClicked(evt);
            }

            public void mousePressed(java.awt.event.MouseEvent evt) {
                flightsTableMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(flightsTable);

        originSelector.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        originSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Tehran", "Rasht", "Mashhad", "Kish", "Shiraz", "Ahvaz", "Tabriz", "Bandarabbas", "Bushehr", "Zahedan", "Ardabil", "Abadan", "Gheshm", "Esfahan", "Gorgan"}));
        originSelector.setEnabled(false);
        originSelector.setFocusable(false);

        destinationSelector.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        destinationSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Tehran", "Rasht", "Mashhad", "Kish", "Shiraz", "Ahvaz", "Tabriz", "Bandarabbas", "Bushehr", "Zahedan", "Ardabil", "Abadan", "Gheshm", "Esfahan", "Gorgan"}));
        destinationSelector.setEnabled(false);
        destinationSelector.setFocusable(false);

        destinationLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        destinationLabel.setText("Destination:");
        destinationLabel.setFocusable(false);

        originLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        originLabel.setText("Origin:");
        originLabel.setFocusable(false);

        arrivalLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        arrivalLabel.setText("Arrival:");
        arrivalLabel.setFocusable(false);

        arrivalChooser.setDateFormatString(" yyyy/MM/dd");
        arrivalChooser.setFocusable(false);
        arrivalChooser.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        numberOfTicketsSpinner.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        numberOfTicketsSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));
        numberOfTicketsSpinner.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        numberOfTicketsSpinner.setEnabled(false);
        numberOfTicketsSpinner.setFocusable(false);

        numberOfTicketsLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        numberOfTicketsLabel.setText("Number of Tickets:");
        numberOfTicketsLabel.setFocusable(false);

        returnFlightsLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        returnFlightsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        returnFlightsLabel.setText("Return Flights");
        returnFlightsLabel.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(currencySelector, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(originSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(originLabel))
                                                .addGap(75, 75, 75)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(destinationSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(destinationLabel))
                                                .addGap(124, 124, 124)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(arrivalChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(arrivalLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(75, 75, 75)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(numberOfTicketsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(numberOfTicketsLabel)))
                                        .addComponent(jScrollPane2)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(357, 357, 357)
                                                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(217, 217, 217)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                .addComponent(roundTripRadioButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(oneWayRadioButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(5, 5, 5))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(returnFlightsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(destinationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(originLabel))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(arrivalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(numberOfTicketsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(destinationSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(originSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(arrivalChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(numberOfTicketsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addComponent(returnFlightsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(currencySelector, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(oneWayRadioButton)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(roundTripRadioButton))))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initOtherComponents() {
        arrivalChooserEditor = (JTextFieldDateEditor) arrivalChooser.getDateEditor();
        spinnerTextField = ((JSpinner.DefaultEditor) numberOfTicketsSpinner.getEditor()).getTextField();

        arrivalChooserEditor.setEditable(false);
        arrivalChooserEditor.setFocusable(false);
        arrivalChooserEditor.setBorder(new LineBorder(Color.BLACK));
        arrivalChooserEditor.setBackground(Color.WHITE);
        arrivalChooserEditor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                dateChooserEditorMouseReleased(evt);
            }
        });

        spinnerTextField.setBackground(this.getBackground());

        this.setLocationRelativeTo(null);
    }

    public ReturnBooking setPreviousFrame(JFrame previousFrame) {
        this.previousFrame = previousFrame;
        return this;
    }

    public ReturnBooking setOrigin(int originIndex) {
        originSelector.setSelectedIndex(originIndex);
        return this;
    }

    public ReturnBooking setDestination(int destinationIndex) {
        destinationSelector.setSelectedIndex(destinationIndex);
        return this;
    }

    public ReturnBooking setNumberOfTickets(int numberOfTickets) {
        numberOfTicketsSpinner.setValue(numberOfTickets);
        return this;
    }

    public ReturnBooking setCurrency(int currencyIndex) {
        currencySelector.setSelectedIndex(currencyIndex);
        return this;
    }

    public ReturnBooking setMinArrivalDate(Date minArrivalDate) {
        arrivalChooser.setMinSelectableDate(minArrivalDate);
        return this;
    }

    public ReturnBooking setOutboundFlight(Flight outboundFlight) {
        this.outboundFlight = outboundFlight;
        return this;
    }

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        redEmptyFields();
        if (isAnyFieldEmpty()) {
            showMessage("Arrival Date must be selected", "", WARNING_MESSAGE);
        } else {
            try {
                flights = flightService.search(getSelectedOrigin(), getSelectedDestination(), getSelectedDeparture());
                nextButton.setEnabled(false);
                clearTable();
                if (flights.isEmpty()) {
                    showMessage("No Flights Found", "", PLAIN_MESSAGE);
                } else {
                    addFlightsToTable();
                }
            } catch (Exception e) {
                String message = "Something went wrong! Please try again later\n\nError Message:\n   " + e.getMessage();
                showMessage(message, "Error", ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        if (getSelectedFlight().getSeatsLeft() < (int) numberOfTicketsSpinner.getValue()) {
            showMessage("There are not enough seats for this number of tickets for this flight", "", WARNING_MESSAGE);
        } else {
            new PassengerInformation(bookingService)
                    .setPreviousFrame(this)
                    .setOutboundFlight(this.outboundFlight)
                    .setReturnFlight(getSelectedFlight())
                    .setNumberOfTickets((int) numberOfTicketsSpinner.getValue())
                    .setVisible(true);
            this.setVisible(false);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.previousFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void currencySelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currencySelectorActionPerformed
        try {
            converterService.update();
            for (int i = 0; i < flights.size(); i++)
                flightsTable.setValueAt(getConvertedPrice(flights.get(i).getPrice()), i, 4);
        } catch (Exception e) {
            String message = "Something went wrong! Please try again later\n\nError Message:\n" + e.getMessage();
            showMessage(message, "Error", ERROR_MESSAGE);
        }
    }//GEN-LAST:event_currencySelectorActionPerformed

    private void flightsTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flightsTableMousePressed
        if (!nextButton.isEnabled() && !flightsTable.getSelectionModel().isSelectionEmpty())
            nextButton.setEnabled(true);
    }//GEN-LAST:event_flightsTableMousePressed

    private void flightsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flightsTableMouseClicked
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1)
            showMessage(infoGenerator.generateFlightInfo(getSelectedFlight()), "Flight", INFORMATION_MESSAGE);
    }//GEN-LAST:event_flightsTableMouseClicked

    private void dateChooserEditorMouseReleased(MouseEvent evt) {//GEN-FIRST:event_dateChooserEditorMouseReleased
        arrivalChooserEditor.setForeground(Color.BLACK);
    }//GEN-LAST:event_dateChooserEditorMouseReleased

    private void showMessage(String message, String title, int type) {
        showMessageDialog(this, message, title, type);
    }

    private void addFlightsToTable() {
        DefaultTableModel flightsTableModel = (DefaultTableModel) flightsTable.getModel();
        try {
            converterService.update();
            for (Flight flight : flights) {
                flightsTableModel.addRow(new Object[]{
                        flight.getFlightNumber(),
                        flight.getOrigin().name,
                        flight.getDestination().name,
                        flight.getDeparture().toString().replace("T", "        "),
                        getConvertedPrice(flight.getPrice()),
                        flight.getSeatsLeft()
                });
            }
        } catch (Exception e) {
            String message = "Something went wrong! Please try again later\n\nError Message:\n" + e.getMessage();
            showMessage(message, "Error", ERROR_MESSAGE);
        }
    }

    private void clearTable() {
        ((DefaultTableModel) flightsTable.getModel()).setRowCount(0);
    }

    private void redEmptyFields() {
        if (isArrivalEmpty())
            arrivalLabel.setForeground(Color.RED);
        else if (arrivalChooser.getForeground() == Color.RED)
            arrivalLabel.setForeground(Color.BLACK);
    }

    private Flight getSelectedFlight() {
        return flights.get(flightsTable.getSelectedRow());
    }

    private double getConvertedPrice(double price) {
        return switch (currencySelector.getSelectedIndex()) {
            case 0 -> price;
            case 1 -> converterService.IRRToUSD(price);
            case 2 -> converterService.IRRToEUR(price);
            default -> -1;
        };
    }

    private boolean isAnyFieldEmpty() {
        return isArrivalEmpty();
    }

    private boolean isArrivalEmpty() {
        return arrivalChooser.getDate() == null;
    }

    private City getSelectedOrigin() {
        return City.valueOf(Objects.requireNonNull(originSelector.getSelectedItem()).toString().toUpperCase());
    }

    private City getSelectedDestination() {
        return City.valueOf(Objects.requireNonNull(destinationSelector.getSelectedItem()).toString().toUpperCase());
    }

    private LocalDate getSelectedDeparture() {
        return arrivalChooser.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser arrivalChooser;
    private javax.swing.JLabel arrivalLabel;
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> currencySelector;
    private javax.swing.JLabel destinationLabel;
    private javax.swing.JComboBox<String> destinationSelector;
    private javax.swing.JTable flightsTable;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel numberOfTicketsLabel;
    private javax.swing.JSpinner numberOfTicketsSpinner;
    private javax.swing.JRadioButton oneWayRadioButton;
    private javax.swing.JLabel originLabel;
    private javax.swing.JComboBox<String> originSelector;
    private javax.swing.JLabel returnFlightsLabel;
    private javax.swing.JRadioButton roundTripRadioButton;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables
    private JTextFieldDateEditor arrivalChooserEditor;
    private JFormattedTextField spinnerTextField;
}